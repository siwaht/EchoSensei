 Call Recording Retrieval Fix

Goal: Diagnose and fix the primary issue preventing users from successfully retrieving call recordings, ensuring all three priority retrieval methods function correctly, and that the background job processes missing recordings reliably. The core problem is that recordings that should be available are not being returned via the primary endpoint /api/recordings/:callId/audio.

1. Primary Investigation & Fix for Priority 1/2 Failure

Target Files:

    server/routes.ts (lines 3088-3149)

    server/integrations/elevenlabs.ts (lines 819-920, and fetchAndStoreAudio implementation)

    server/audioStorage.ts (methods related to getSignedUrl and uploadAudio)

Task Details:

    Verify Priority 1 (Local Storage): Ensure the check if (call.audioStorageKey) correctly evaluates existence and that audioStorage.getSignedUrl(call.audioStorageKey) successfully generates a valid, redirectable URL for files in the audio-storage/ directory.

        Potential Fix: If getSignedUrl is failing or the redirect is malformed, fix the implementation in server/audioStorage.ts or server/routes.ts.

    Verify Priority 2 (ElevenLabs Fetch): Confirm that the following logic is robust:

        The conditional check if (call.conversationId && call.audioFetchStatus !== 'unavailable') is correct.

        The fetchAndStoreAudio process correctly:

            Calls hasConversationAudio and getConversationAudio without ElevenLabs API errors.

            Successfully executes audioStorage.uploadAudio and saves the file to audio-storage/.

            Crucially: Correctly updates the database with the audioStorageKey, audioFetchStatus: 'available', and recordingUrl immediately upon successful upload.

        Potential Fix: Implement detailed logging in fetchAndStoreAudio to trace failure points (API error, upload error, DB update error). If the DB update is failing, ensure the storage.updateCall logic is transactional and successful.

    Review Fallback Logic: Confirm the control flow between Priority 1 and 2 handles all states (audioStorageKey present/missing, audioFetchStatus value).

2. Background Job Reliability Fix

Target File:

    server/routes.ts (lines 3265-3347)

Task Details:

    Job Trigger and Filtering: Ensure the /api/jobs/fetch-missing-audio endpoint correctly authorizes admin users and reliably queries all calls where audioFetchStatus is 'pending' or 'failed'.

    Batch Processing: Verify that batchFetchAndStoreAudio() is resilient and implements proper error handling/retries for individual calls without failing the entire batch job.

    Database State Management: For calls that fail the batch fetch, ensure the status is correctly updated to 'failed' and audioFetchedAt is logged to prevent immediate, continuous re-attempting of unretrievable recordings.

3. Storage and Metadata Consistency Check

Target Files:

    server/audioStorage.ts

Task Details:

    File Naming/Storage Key: Confirm that the generated audioStorageKey (used in DB) perfectly matches the file path expected by getSignedUrl (e.g., if audioStorageKey is just the filename {conversationId}_{timestamp}.mp3, ensure getSignedUrl correctly prepends the audio-storage/ path).

    Metadata Check: Verify that the JSON metadata file (.meta.json) is being created and updated atomically with the .mp3 file, and that it contains the correct audioStorageKey and call_id.

Required Output:

    A concise commit message summarizing the changes made.

    The diffs for all modified files, highlighting the lines where the fix was applied.

    A brief explanation of why the previous code was failing and how the new code addresses it.