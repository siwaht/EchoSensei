version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: echosensei-db
    environment:
      POSTGRES_USER: echosensei
      POSTGRES_PASSWORD: dev_password_change_in_production
      POSTGRES_DB: echosensei
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U echosensei"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - echosensei

  # Redis (optional, for caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: echosensei-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - echosensei

  # EchoSensei Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: echosensei-app
    ports:
      - "5000:5000"
    environment:
      # Database
      DATABASE_URL: postgresql://echosensei:dev_password_change_in_production@postgres:5432/echosensei
      
      # Security (generate strong keys for production)
      SESSION_SECRET: dev-session-secret-change-in-production-min-32-chars
      ENCRYPTION_KEY: dev-encryption-key-change-in-production-min-32-chars
      
      # Server
      NODE_ENV: production
      HOST: 0.0.0.0
      PORT: 5000
      PUBLIC_URL: http://localhost:5000
      
      # Storage (local for development, use S3/GCS/Azure in production)
      STORAGE_PROVIDER: local
      
      # Optional: Add your API keys here
      # ELEVENLABS_API_KEY: your_key_here
      # MISTRAL_API_KEY: your_key_here
      # STRIPE_SECRET_KEY: your_key_here
      
    volumes:
      - ./uploads:/app/uploads
      - ./audio-storage:/app/audio-storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - echosensei
    restart: unless-stopped

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: echosensei-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - echosensei
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  echosensei:
    driver: bridge
